/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface XDaiMessengerWrapperInterface extends utils.Interface {
  functions: {
    "ambBridge()": FunctionFragment;
    "canConfirmRoot(address,bytes32,uint256,uint256)": FunctionFragment;
    "confirmRoots(bytes32[],uint256[],uint256[],uint256[])": FunctionFragment;
    "defaultGasLimit()": FunctionFragment;
    "isRootConfirmation()": FunctionFragment;
    "l1BridgeAddress()": FunctionFragment;
    "l1MessengerAddress()": FunctionFragment;
    "l2BridgeAddress()": FunctionFragment;
    "l2ChainId()": FunctionFragment;
    "sendCrossDomainMessage(bytes)": FunctionFragment;
    "verifySender(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ambBridge"
      | "canConfirmRoot"
      | "confirmRoots"
      | "defaultGasLimit"
      | "isRootConfirmation"
      | "l1BridgeAddress"
      | "l1MessengerAddress"
      | "l2BridgeAddress"
      | "l2ChainId"
      | "sendCrossDomainMessage"
      | "verifySender"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ambBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canConfirmRoot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRoots",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRootConfirmation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1MessengerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2ChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendCrossDomainMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySender",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "ambBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canConfirmRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRootConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1MessengerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2ChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCrossDomainMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySender",
    data: BytesLike
  ): Result;

  events: {};
}

export interface XDaiMessengerWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XDaiMessengerWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ambBridge(overrides?: CallOverrides): Promise<[string]>;

    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    isRootConfirmation(overrides?: CallOverrides): Promise<[boolean]>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<[string]>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l2ChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ambBridge(overrides?: CallOverrides): Promise<string>;

  canConfirmRoot(
    l1Bridge: PromiseOrValue<string>,
    rootHash: PromiseOrValue<BytesLike>,
    totalAmount: PromiseOrValue<BigNumberish>,
    challengePeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  confirmRoots(
    rootHashes: PromiseOrValue<BytesLike>[],
    destinationChainIds: PromiseOrValue<BigNumberish>[],
    totalAmounts: PromiseOrValue<BigNumberish>[],
    rootCommittedAts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  isRootConfirmation(overrides?: CallOverrides): Promise<boolean>;

  l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l1MessengerAddress(overrides?: CallOverrides): Promise<string>;

  l2BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

  sendCrossDomainMessage(
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySender(
    l1BridgeCaller: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ambBridge(overrides?: CallOverrides): Promise<string>;

    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    isRootConfirmation(overrides?: CallOverrides): Promise<boolean>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<string>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ambBridge(overrides?: CallOverrides): Promise<BigNumber>;

    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    isRootConfirmation(overrides?: CallOverrides): Promise<BigNumber>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ambBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRootConfirmation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1MessengerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
