/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface L2_AmmWrapperInterface extends utils.Interface {
  functions: {
    "attemptSwap(address,uint256,uint256,uint256)": FunctionFragment;
    "bridge()": FunctionFragment;
    "exchangeAddress()": FunctionFragment;
    "hToken()": FunctionFragment;
    "l2CanonicalToken()": FunctionFragment;
    "l2CanonicalTokenIsEth()": FunctionFragment;
    "swapAndSend(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attemptSwap"
      | "bridge"
      | "exchangeAddress"
      | "hToken"
      | "l2CanonicalToken"
      | "l2CanonicalTokenIsEth"
      | "swapAndSend"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attemptSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2CanonicalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2CanonicalTokenIsEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndSend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "attemptSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2CanonicalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2CanonicalTokenIsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndSend",
    data: BytesLike
  ): Result;

  events: {};
}

export interface L2_AmmWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2_AmmWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attemptSwap(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    exchangeAddress(overrides?: CallOverrides): Promise<[string]>;

    hToken(overrides?: CallOverrides): Promise<[string]>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<[string]>;

    l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<[boolean]>;

    swapAndSend(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      destinationAmountOutMin: PromiseOrValue<BigNumberish>,
      destinationDeadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  attemptSwap(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  exchangeAddress(overrides?: CallOverrides): Promise<string>;

  hToken(overrides?: CallOverrides): Promise<string>;

  l2CanonicalToken(overrides?: CallOverrides): Promise<string>;

  l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<boolean>;

  swapAndSend(
    chainId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    bonderFee: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    destinationAmountOutMin: PromiseOrValue<BigNumberish>,
    destinationDeadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attemptSwap(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    exchangeAddress(overrides?: CallOverrides): Promise<string>;

    hToken(overrides?: CallOverrides): Promise<string>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<string>;

    l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<boolean>;

    swapAndSend(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      destinationAmountOutMin: PromiseOrValue<BigNumberish>,
      destinationDeadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    attemptSwap(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    hToken(overrides?: CallOverrides): Promise<BigNumber>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<BigNumber>;

    l2CanonicalTokenIsEth(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndSend(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      destinationAmountOutMin: PromiseOrValue<BigNumberish>,
      destinationDeadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attemptSwap(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2CanonicalTokenIsEth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapAndSend(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      destinationAmountOutMin: PromiseOrValue<BigNumberish>,
      destinationDeadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
