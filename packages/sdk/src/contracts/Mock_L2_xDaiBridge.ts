/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export declare namespace Bridge {
  export type TransferRootStruct = {
    total: PromiseOrValue<BigNumberish>;
    amountWithdrawn: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type TransferRootStructOutput = [BigNumber, BigNumber, BigNumber] & {
    total: BigNumber;
    amountWithdrawn: BigNumber;
    createdAt: BigNumber;
  };
}

export interface Mock_L2_xDaiBridgeInterface extends utils.Interface {
  functions: {
    "activeChainIds(uint256)": FunctionFragment;
    "addActiveChainIds(uint256[])": FunctionFragment;
    "addBonder(address)": FunctionFragment;
    "ammWrapper()": FunctionFragment;
    "bondWithdrawal(address,uint256,bytes32,uint256)": FunctionFragment;
    "bondWithdrawalAndDistribute(address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "commitTransfers(uint256)": FunctionFragment;
    "defaultGasLimit()": FunctionFragment;
    "distribute(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getBondedWithdrawalAmount(address,bytes32)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getCredit(address)": FunctionFragment;
    "getDebitAndAdditionalDebit(address)": FunctionFragment;
    "getIsBonder(address)": FunctionFragment;
    "getNextTransferNonce()": FunctionFragment;
    "getRawDebit(address)": FunctionFragment;
    "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTransferRoot(bytes32,uint256)": FunctionFragment;
    "getTransferRootId(bytes32,uint256)": FunctionFragment;
    "hToken()": FunctionFragment;
    "isTransferIdSpent(bytes32)": FunctionFragment;
    "l1BridgeAddress()": FunctionFragment;
    "l1BridgeCaller()": FunctionFragment;
    "l1ChainId()": FunctionFragment;
    "l1Governance()": FunctionFragment;
    "lastCommitTimeForChainId(uint256)": FunctionFragment;
    "maxPendingTransfers()": FunctionFragment;
    "messenger()": FunctionFragment;
    "minBonderBps()": FunctionFragment;
    "minBonderFeeAbsolute()": FunctionFragment;
    "minimumForceCommitDelay()": FunctionFragment;
    "pendingAmountForChainId(uint256)": FunctionFragment;
    "pendingTransferIdsForChainId(uint256,uint256)": FunctionFragment;
    "removeActiveChainIds(uint256[])": FunctionFragment;
    "removeBonder(address)": FunctionFragment;
    "rescueTransferRoot(bytes32,uint256,address)": FunctionFragment;
    "send(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setAmmWrapper(address)": FunctionFragment;
    "setDefaultGasLimit(uint256)": FunctionFragment;
    "setHopBridgeTokenOwner(address)": FunctionFragment;
    "setL1BridgeAddress(address)": FunctionFragment;
    "setL1BridgeCaller(address)": FunctionFragment;
    "setL1Governance(address)": FunctionFragment;
    "setMaxPendingTransfers(uint256)": FunctionFragment;
    "setMessenger(address)": FunctionFragment;
    "setMinimumBonderFeeRequirements(uint256,uint256)": FunctionFragment;
    "setMinimumForceCommitDelay(uint256)": FunctionFragment;
    "setTransferRoot(bytes32,uint256)": FunctionFragment;
    "settleBondedWithdrawal(address,bytes32,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
    "settleBondedWithdrawals(address,bytes32[],uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "transferNonceIncrementer()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw(address,uint256,bytes32,uint256,uint256,uint256,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeChainIds"
      | "addActiveChainIds"
      | "addBonder"
      | "ammWrapper"
      | "bondWithdrawal"
      | "bondWithdrawalAndDistribute"
      | "commitTransfers"
      | "defaultGasLimit"
      | "distribute"
      | "getBondedWithdrawalAmount"
      | "getChainId"
      | "getCredit"
      | "getDebitAndAdditionalDebit"
      | "getIsBonder"
      | "getNextTransferNonce"
      | "getRawDebit"
      | "getTransferId"
      | "getTransferRoot"
      | "getTransferRootId"
      | "hToken"
      | "isTransferIdSpent"
      | "l1BridgeAddress"
      | "l1BridgeCaller"
      | "l1ChainId"
      | "l1Governance"
      | "lastCommitTimeForChainId"
      | "maxPendingTransfers"
      | "messenger"
      | "minBonderBps"
      | "minBonderFeeAbsolute"
      | "minimumForceCommitDelay"
      | "pendingAmountForChainId"
      | "pendingTransferIdsForChainId"
      | "removeActiveChainIds"
      | "removeBonder"
      | "rescueTransferRoot"
      | "send"
      | "setAmmWrapper"
      | "setDefaultGasLimit"
      | "setHopBridgeTokenOwner"
      | "setL1BridgeAddress"
      | "setL1BridgeCaller"
      | "setL1Governance"
      | "setMaxPendingTransfers"
      | "setMessenger"
      | "setMinimumBonderFeeRequirements"
      | "setMinimumForceCommitDelay"
      | "setTransferRoot"
      | "settleBondedWithdrawal"
      | "settleBondedWithdrawals"
      | "stake"
      | "transferNonceIncrementer"
      | "unstake"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeChainIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addActiveChainIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addBonder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ammWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithdrawalAndDistribute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTransfers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedWithdrawalAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebitAndAdditionalDebit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsBonder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTransferNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRawDebit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRootId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransferIdSpent",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "l1BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1BridgeCaller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1ChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1Governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCommitTimeForChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPendingTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minBonderBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBonderFeeAbsolute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumForceCommitDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAmountForChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTransferIdsForChainId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeActiveChainIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBonder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTransferRoot",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmmWrapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHopBridgeTokenOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BridgeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BridgeCaller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1Governance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPendingTransfers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumBonderFeeRequirements",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumForceCommitDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawals",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNonceIncrementer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addActiveChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ammWrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithdrawalAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondedWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebitAndAdditionalDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTransferNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRootId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferIdSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1BridgeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1ChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1Governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCommitTimeForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPendingTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBonderBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBonderFeeAbsolute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumForceCommitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAmountForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTransferIdsForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeActiveChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAmmWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHopBridgeTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BridgeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1Governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPendingTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumBonderFeeRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumForceCommitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNonceIncrementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BonderAdded(address)": EventFragment;
    "BonderRemoved(address)": EventFragment;
    "MultipleWithdrawalsSettled(address,bytes32,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "TransferFromL1Completed(address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "TransferRootSet(bytes32,uint256)": EventFragment;
    "TransferSent(bytes32,uint256,address,uint256,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "TransfersCommitted(uint256,bytes32,uint256,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "WithdrawalBondSettled(address,bytes32,bytes32)": EventFragment;
    "WithdrawalBonded(bytes32,uint256)": EventFragment;
    "Withdrew(bytes32,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultipleWithdrawalsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFromL1Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBondSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export interface BonderAddedEventObject {
  newBonder: string;
}
export type BonderAddedEvent = TypedEvent<[string], BonderAddedEventObject>;

export type BonderAddedEventFilter = TypedEventFilter<BonderAddedEvent>;

export interface BonderRemovedEventObject {
  previousBonder: string;
}
export type BonderRemovedEvent = TypedEvent<[string], BonderRemovedEventObject>;

export type BonderRemovedEventFilter = TypedEventFilter<BonderRemovedEvent>;

export interface MultipleWithdrawalsSettledEventObject {
  bonder: string;
  rootHash: string;
  totalBondsSettled: BigNumber;
}
export type MultipleWithdrawalsSettledEvent = TypedEvent<
  [string, string, BigNumber],
  MultipleWithdrawalsSettledEventObject
>;

export type MultipleWithdrawalsSettledEventFilter =
  TypedEventFilter<MultipleWithdrawalsSettledEvent>;

export interface StakeEventObject {
  account: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TransferFromL1CompletedEventObject {
  recipient: string;
  amount: BigNumber;
  amountOutMin: BigNumber;
  deadline: BigNumber;
  relayer: string;
  relayerFee: BigNumber;
}
export type TransferFromL1CompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  TransferFromL1CompletedEventObject
>;

export type TransferFromL1CompletedEventFilter =
  TypedEventFilter<TransferFromL1CompletedEvent>;

export interface TransferRootSetEventObject {
  rootHash: string;
  totalAmount: BigNumber;
}
export type TransferRootSetEvent = TypedEvent<
  [string, BigNumber],
  TransferRootSetEventObject
>;

export type TransferRootSetEventFilter = TypedEventFilter<TransferRootSetEvent>;

export interface TransferSentEventObject {
  transferId: string;
  chainId: BigNumber;
  recipient: string;
  amount: BigNumber;
  transferNonce: string;
  bonderFee: BigNumber;
  index: BigNumber;
  amountOutMin: BigNumber;
  deadline: BigNumber;
}
export type TransferSentEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TransferSentEventObject
>;

export type TransferSentEventFilter = TypedEventFilter<TransferSentEvent>;

export interface TransfersCommittedEventObject {
  destinationChainId: BigNumber;
  rootHash: string;
  totalAmount: BigNumber;
  rootCommittedAt: BigNumber;
}
export type TransfersCommittedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  TransfersCommittedEventObject
>;

export type TransfersCommittedEventFilter =
  TypedEventFilter<TransfersCommittedEvent>;

export interface UnstakeEventObject {
  account: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface WithdrawalBondSettledEventObject {
  bonder: string;
  transferId: string;
  rootHash: string;
}
export type WithdrawalBondSettledEvent = TypedEvent<
  [string, string, string],
  WithdrawalBondSettledEventObject
>;

export type WithdrawalBondSettledEventFilter =
  TypedEventFilter<WithdrawalBondSettledEvent>;

export interface WithdrawalBondedEventObject {
  transferId: string;
  amount: BigNumber;
}
export type WithdrawalBondedEvent = TypedEvent<
  [string, BigNumber],
  WithdrawalBondedEventObject
>;

export type WithdrawalBondedEventFilter =
  TypedEventFilter<WithdrawalBondedEvent>;

export interface WithdrewEventObject {
  transferId: string;
  recipient: string;
  amount: BigNumber;
  transferNonce: string;
}
export type WithdrewEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithdrewEventObject
>;

export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;

export interface Mock_L2_xDaiBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Mock_L2_xDaiBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ammWrapper(overrides?: CallOverrides): Promise<[string]>;

    bondWithdrawal(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondWithdrawalAndDistribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitTransfers(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      relayer: PromiseOrValue<string>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBondedWithdrawalAmount(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCredit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebitAndAdditionalDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsBonder(
      maybeBonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<[string]>;

    getRawDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTransferId(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Bridge.TransferRootStructOutput]>;

    getTransferRootId(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hToken(overrides?: CallOverrides): Promise<[string]>;

    isTransferIdSpent(
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l1BridgeCaller(overrides?: CallOverrides): Promise<[string]>;

    l1ChainId(overrides?: CallOverrides): Promise<[string]>;

    l1Governance(overrides?: CallOverrides): Promise<[string]>;

    lastCommitTimeForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<[BigNumber]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    minBonderBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingAmountForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingTransferIdsForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      originalAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmmWrapper(
      _ammWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultGasLimit(
      _defaultGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHopBridgeTokenOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1BridgeAddress(
      _l1BridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1BridgeCaller(
      _l1BridgeCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1Governance(
      _l1Governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPendingTransfers(
      _maxPendingTransfers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMessenger(
      _messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: PromiseOrValue<BigNumberish>,
      _minBonderFeeAbsolute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawal(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawals(
      bonder: PromiseOrValue<string>,
      transferIds: PromiseOrValue<BytesLike>[],
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      bonder: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activeChainIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addActiveChainIds(
    chainIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBonder(
    bonder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ammWrapper(overrides?: CallOverrides): Promise<string>;

  bondWithdrawal(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    transferNonce: PromiseOrValue<BytesLike>,
    bonderFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondWithdrawalAndDistribute(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    transferNonce: PromiseOrValue<BytesLike>,
    bonderFee: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitTransfers(
    destinationChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    relayer: PromiseOrValue<string>,
    relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBondedWithdrawalAmount(
    bonder: PromiseOrValue<string>,
    transferId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCredit(
    bonder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebitAndAdditionalDebit(
    bonder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsBonder(
    maybeBonder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNextTransferNonce(overrides?: CallOverrides): Promise<string>;

  getRawDebit(
    bonder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransferId(
    chainId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    transferNonce: PromiseOrValue<BytesLike>,
    bonderFee: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransferRoot(
    rootHash: PromiseOrValue<BytesLike>,
    totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Bridge.TransferRootStructOutput>;

  getTransferRootId(
    rootHash: PromiseOrValue<BytesLike>,
    totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hToken(overrides?: CallOverrides): Promise<string>;

  isTransferIdSpent(
    transferId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l1BridgeCaller(overrides?: CallOverrides): Promise<string>;

  l1ChainId(overrides?: CallOverrides): Promise<string>;

  l1Governance(overrides?: CallOverrides): Promise<string>;

  lastCommitTimeForChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

  messenger(overrides?: CallOverrides): Promise<string>;

  minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

  minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

  minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

  pendingAmountForChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingTransferIdsForChainId(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeActiveChainIds(
    chainIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBonder(
    bonder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueTransferRoot(
    rootHash: PromiseOrValue<BytesLike>,
    originalAmount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    chainId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    bonderFee: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmmWrapper(
    _ammWrapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultGasLimit(
    _defaultGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHopBridgeTokenOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1BridgeAddress(
    _l1BridgeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1BridgeCaller(
    _l1BridgeCaller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1Governance(
    _l1Governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPendingTransfers(
    _maxPendingTransfers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMessenger(
    _messenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumBonderFeeRequirements(
    _minBonderBps: PromiseOrValue<BigNumberish>,
    _minBonderFeeAbsolute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumForceCommitDelay(
    _minimumForceCommitDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTransferRoot(
    rootHash: PromiseOrValue<BytesLike>,
    totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawal(
    bonder: PromiseOrValue<string>,
    transferId: PromiseOrValue<BytesLike>,
    rootHash: PromiseOrValue<BytesLike>,
    transferRootTotalAmount: PromiseOrValue<BigNumberish>,
    transferIdTreeIndex: PromiseOrValue<BigNumberish>,
    siblings: PromiseOrValue<BytesLike>[],
    totalLeaves: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawals(
    bonder: PromiseOrValue<string>,
    transferIds: PromiseOrValue<BytesLike>[],
    totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    bonder: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    transferNonce: PromiseOrValue<BytesLike>,
    bonderFee: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    rootHash: PromiseOrValue<BytesLike>,
    transferRootTotalAmount: PromiseOrValue<BigNumberish>,
    transferIdTreeIndex: PromiseOrValue<BigNumberish>,
    siblings: PromiseOrValue<BytesLike>[],
    totalLeaves: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addBonder(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ammWrapper(overrides?: CallOverrides): Promise<string>;

    bondWithdrawal(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondWithdrawalAndDistribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTransfers(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      relayer: PromiseOrValue<string>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBondedWithdrawalAmount(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<string>;

    getRawDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferId(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Bridge.TransferRootStructOutput>;

    getTransferRootId(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hToken(overrides?: CallOverrides): Promise<string>;

    isTransferIdSpent(
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l1BridgeCaller(overrides?: CallOverrides): Promise<string>;

    l1ChainId(overrides?: CallOverrides): Promise<string>;

    l1Governance(overrides?: CallOverrides): Promise<string>;

    lastCommitTimeForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<string>;

    minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmountForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTransferIdsForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeBonder(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      originalAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmmWrapper(
      _ammWrapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultGasLimit(
      _defaultGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHopBridgeTokenOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1BridgeAddress(
      _l1BridgeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1BridgeCaller(
      _l1BridgeCaller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1Governance(
      _l1Governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPendingTransfers(
      _maxPendingTransfers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessenger(
      _messenger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: PromiseOrValue<BigNumberish>,
      _minBonderFeeAbsolute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawal(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawals(
      bonder: PromiseOrValue<string>,
      transferIds: PromiseOrValue<BytesLike>[],
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      bonder: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BonderAdded(address)"(
      newBonder?: PromiseOrValue<string> | null
    ): BonderAddedEventFilter;
    BonderAdded(
      newBonder?: PromiseOrValue<string> | null
    ): BonderAddedEventFilter;

    "BonderRemoved(address)"(
      previousBonder?: PromiseOrValue<string> | null
    ): BonderRemovedEventFilter;
    BonderRemoved(
      previousBonder?: PromiseOrValue<string> | null
    ): BonderRemovedEventFilter;

    "MultipleWithdrawalsSettled(address,bytes32,uint256)"(
      bonder?: PromiseOrValue<string> | null,
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalBondsSettled?: null
    ): MultipleWithdrawalsSettledEventFilter;
    MultipleWithdrawalsSettled(
      bonder?: PromiseOrValue<string> | null,
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalBondsSettled?: null
    ): MultipleWithdrawalsSettledEventFilter;

    "Stake(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;

    "TransferFromL1Completed(address,uint256,uint256,uint256,address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      amountOutMin?: null,
      deadline?: null,
      relayer?: PromiseOrValue<string> | null,
      relayerFee?: null
    ): TransferFromL1CompletedEventFilter;
    TransferFromL1Completed(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      amountOutMin?: null,
      deadline?: null,
      relayer?: PromiseOrValue<string> | null,
      relayerFee?: null
    ): TransferFromL1CompletedEventFilter;

    "TransferRootSet(bytes32,uint256)"(
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null
    ): TransferRootSetEventFilter;
    TransferRootSet(
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null
    ): TransferRootSetEventFilter;

    "TransferSent(bytes32,uint256,address,uint256,bytes32,uint256,uint256,uint256,uint256)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      transferNonce?: null,
      bonderFee?: null,
      index?: null,
      amountOutMin?: null,
      deadline?: null
    ): TransferSentEventFilter;
    TransferSent(
      transferId?: PromiseOrValue<BytesLike> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      transferNonce?: null,
      bonderFee?: null,
      index?: null,
      amountOutMin?: null,
      deadline?: null
    ): TransferSentEventFilter;

    "TransfersCommitted(uint256,bytes32,uint256,uint256)"(
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null,
      rootCommittedAt?: null
    ): TransfersCommittedEventFilter;
    TransfersCommitted(
      destinationChainId?: PromiseOrValue<BigNumberish> | null,
      rootHash?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null,
      rootCommittedAt?: null
    ): TransfersCommittedEventFilter;

    "Unstake(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;

    "WithdrawalBondSettled(address,bytes32,bytes32)"(
      bonder?: PromiseOrValue<string> | null,
      transferId?: PromiseOrValue<BytesLike> | null,
      rootHash?: PromiseOrValue<BytesLike> | null
    ): WithdrawalBondSettledEventFilter;
    WithdrawalBondSettled(
      bonder?: PromiseOrValue<string> | null,
      transferId?: PromiseOrValue<BytesLike> | null,
      rootHash?: PromiseOrValue<BytesLike> | null
    ): WithdrawalBondSettledEventFilter;

    "WithdrawalBonded(bytes32,uint256)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): WithdrawalBondedEventFilter;
    WithdrawalBonded(
      transferId?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): WithdrawalBondedEventFilter;

    "Withdrew(bytes32,address,uint256,bytes32)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      transferNonce?: null
    ): WithdrewEventFilter;
    Withdrew(
      transferId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      transferNonce?: null
    ): WithdrewEventFilter;
  };

  estimateGas: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ammWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    bondWithdrawal(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondWithdrawalAndDistribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitTransfers(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      relayer: PromiseOrValue<string>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBondedWithdrawalAmount(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRawDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferId(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRootId(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hToken(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferIdSpent(
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l1BridgeCaller(overrides?: CallOverrides): Promise<BigNumber>;

    l1ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    l1Governance(overrides?: CallOverrides): Promise<BigNumber>;

    lastCommitTimeForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmountForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTransferIdsForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      originalAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmmWrapper(
      _ammWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultGasLimit(
      _defaultGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHopBridgeTokenOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1BridgeAddress(
      _l1BridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1BridgeCaller(
      _l1BridgeCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1Governance(
      _l1Governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPendingTransfers(
      _maxPendingTransfers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMessenger(
      _messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: PromiseOrValue<BigNumberish>,
      _minBonderFeeAbsolute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawal(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawals(
      bonder: PromiseOrValue<string>,
      transferIds: PromiseOrValue<BytesLike>[],
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      bonder: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ammWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondWithdrawal(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondWithdrawalAndDistribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitTransfers(
      destinationChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      relayer: PromiseOrValue<string>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBondedWithdrawalAmount(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCredit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebitAndAdditionalDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsBonder(
      maybeBonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTransferNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawDebit(
      bonder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferId(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRootId(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferIdSpent(
      transferId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1BridgeCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCommitTimeForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPendingTransfers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBonderBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBonderFeeAbsolute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumForceCommitDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingAmountForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingTransferIdsForChainId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeActiveChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBonder(
      bonder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      originalAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmmWrapper(
      _ammWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultGasLimit(
      _defaultGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHopBridgeTokenOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1BridgeAddress(
      _l1BridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1BridgeCaller(
      _l1BridgeCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1Governance(
      _l1Governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPendingTransfers(
      _maxPendingTransfers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMessenger(
      _messenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: PromiseOrValue<BigNumberish>,
      _minBonderFeeAbsolute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTransferRoot(
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawal(
      bonder: PromiseOrValue<string>,
      transferId: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawals(
      bonder: PromiseOrValue<string>,
      transferIds: PromiseOrValue<BytesLike>[],
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      bonder: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferNonceIncrementer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      transferNonce: PromiseOrValue<BytesLike>,
      bonderFee: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      rootHash: PromiseOrValue<BytesLike>,
      transferRootTotalAmount: PromiseOrValue<BigNumberish>,
      transferIdTreeIndex: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      totalLeaves: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
