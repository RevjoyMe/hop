/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface L1_xDaiForeignOmniBridgeInterface extends utils.Interface {
  functions: {
    "relayTokens(address,address,uint256)": FunctionFragment;
    "erc20token()": FunctionFragment;
    "relayedMessages(bytes32)": FunctionFragment;
    "totalSpentPerDay(uint256)": FunctionFragment;
    "isChaiTokenEnabled()": FunctionFragment;
    "dsrBalance()": FunctionFragment;
    "isHDTokenBalanceAboveMinBalance()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "setExecutionDailyLimit(uint256)": FunctionFragment;
    "getCurrentDay()": FunctionFragment;
    "requiredBlockConfirmations()": FunctionFragment;
    "executeSignatures(bytes,bytes)": FunctionFragment;
    "minHDTokenBalance()": FunctionFragment;
    "getBridgeMode()": FunctionFragment;
    "executionDailyLimit()": FunctionFragment;
    "totalExecutedPerDay(uint256)": FunctionFragment;
    "isTokenSwapAllowed(uint256)": FunctionFragment;
    "dailyLimit()": FunctionFragment;
    "minDaiTokenBalance()": FunctionFragment;
    "claimTokens(address,address)": FunctionFragment;
    "setMinHDTokenBalance(uint256)": FunctionFragment;
    "swapTokens()": FunctionFragment;
    "withinExecutionLimit(uint256)": FunctionFragment;
    "executionMaxPerTx()": FunctionFragment;
    "requiredSignatures()": FunctionFragment;
    "owner()": FunctionFragment;
    "setInterestCollectionPeriod(uint256)": FunctionFragment;
    "interestCollectionPeriod()": FunctionFragment;
    "validatorContract()": FunctionFragment;
    "deployedAtBlock()": FunctionFragment;
    "getBridgeInterfacesVersion()": FunctionFragment;
    "setInterestReceiver(address)": FunctionFragment;
    "fixLockedSai(address)": FunctionFragment;
    "payInterest()": FunctionFragment;
    "isDaiNeedsToBeInvested()": FunctionFragment;
    "setMinPerTx(uint256)": FunctionFragment;
    "halfDuplexErc20token()": FunctionFragment;
    "setMinDaiTokenBalance(uint256)": FunctionFragment;
    "chaiToken()": FunctionFragment;
    "setRequiredBlockConfirmations(uint256)": FunctionFragment;
    "setDailyLimit(uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256[],uint256[],address,uint256,address)": FunctionFragment;
    "investedAmountInDai()": FunctionFragment;
    "setGasPrice(uint256)": FunctionFragment;
    "setMaxPerTx(uint256)": FunctionFragment;
    "interestReceiver()": FunctionFragment;
    "initializeChaiToken(address)": FunctionFragment;
    "initializeChaiToken()": FunctionFragment;
    "chaiBalance()": FunctionFragment;
    "convertDaiToChai()": FunctionFragment;
    "removeChaiToken()": FunctionFragment;
    "decimalShift()": FunctionFragment;
    "minPerTx()": FunctionFragment;
    "withinLimit(uint256)": FunctionFragment;
    "lastInterestPayment()": FunctionFragment;
    "setExecutionMaxPerTx(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "maxPerTx()": FunctionFragment;
    "gasPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "relayTokens"
      | "erc20token"
      | "relayedMessages"
      | "totalSpentPerDay"
      | "isChaiTokenEnabled"
      | "dsrBalance"
      | "isHDTokenBalanceAboveMinBalance"
      | "isInitialized"
      | "setExecutionDailyLimit"
      | "getCurrentDay"
      | "requiredBlockConfirmations"
      | "executeSignatures"
      | "minHDTokenBalance"
      | "getBridgeMode"
      | "executionDailyLimit"
      | "totalExecutedPerDay"
      | "isTokenSwapAllowed"
      | "dailyLimit"
      | "minDaiTokenBalance"
      | "claimTokens"
      | "setMinHDTokenBalance"
      | "swapTokens"
      | "withinExecutionLimit"
      | "executionMaxPerTx"
      | "requiredSignatures"
      | "owner"
      | "setInterestCollectionPeriod"
      | "interestCollectionPeriod"
      | "validatorContract"
      | "deployedAtBlock"
      | "getBridgeInterfacesVersion"
      | "setInterestReceiver"
      | "fixLockedSai"
      | "payInterest"
      | "isDaiNeedsToBeInvested"
      | "setMinPerTx"
      | "halfDuplexErc20token"
      | "setMinDaiTokenBalance"
      | "chaiToken"
      | "setRequiredBlockConfirmations"
      | "setDailyLimit"
      | "initialize"
      | "investedAmountInDai"
      | "setGasPrice"
      | "setMaxPerTx"
      | "interestReceiver"
      | "initializeChaiToken(address)"
      | "initializeChaiToken()"
      | "chaiBalance"
      | "convertDaiToChai"
      | "removeChaiToken"
      | "decimalShift"
      | "minPerTx"
      | "withinLimit"
      | "lastInterestPayment"
      | "setExecutionMaxPerTx"
      | "transferOwnership"
      | "maxPerTx"
      | "gasPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "relayTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayedMessages",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSpentPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isChaiTokenEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dsrBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHDTokenBalanceAboveMinBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionDailyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredBlockConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeSignatures",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "minHDTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionDailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutedPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenSwapAllowed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDaiTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinHDTokenBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withinExecutionLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executionMaxPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setInterestCollectionPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestCollectionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedAtBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeInterfacesVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fixLockedSai",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDaiNeedsToBeInvested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "halfDuplexErc20token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDaiTokenBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chaiToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRequiredBlockConfirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "investedAmountInDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChaiToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChaiToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chaiBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertDaiToChai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeChaiToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalShift",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPerTx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withinLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionMaxPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "maxPerTx", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "relayTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSpentPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChaiTokenEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dsrBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHDTokenBalanceAboveMinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredBlockConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minHDTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutedPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSwapAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDaiTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinHDTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withinExecutionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterestCollectionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestCollectionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeInterfacesVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixLockedSai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDaiNeedsToBeInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "halfDuplexErc20token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDaiTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chaiToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredBlockConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investedAmountInDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeChaiToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeChaiToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chaiBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDaiToChai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChaiToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minPerTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPerTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;

  events: {
    "PaidInterest(address,uint256)": EventFragment;
    "TokensSwapped(address,address,uint256)": EventFragment;
    "RelayedMessage(address,uint256,bytes32)": EventFragment;
    "UserRequestForAffirmation(address,uint256)": EventFragment;
    "DailyLimitChanged(uint256)": EventFragment;
    "ExecutionDailyLimitChanged(uint256)": EventFragment;
    "GasPriceChanged(uint256)": EventFragment;
    "RequiredBlockConfirmationChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaidInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRequestForAffirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailyLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionDailyLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPriceChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequiredBlockConfirmationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface PaidInterestEventObject {
  to: string;
  value: BigNumber;
}
export type PaidInterestEvent = TypedEvent<
  [string, BigNumber],
  PaidInterestEventObject
>;

export type PaidInterestEventFilter = TypedEventFilter<PaidInterestEvent>;

export interface TokensSwappedEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TokensSwappedEvent = TypedEvent<
  [string, string, BigNumber],
  TokensSwappedEventObject
>;

export type TokensSwappedEventFilter = TypedEventFilter<TokensSwappedEvent>;

export interface RelayedMessageEventObject {
  recipient: string;
  value: BigNumber;
  transactionHash: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string, BigNumber, string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface UserRequestForAffirmationEventObject {
  recipient: string;
  value: BigNumber;
}
export type UserRequestForAffirmationEvent = TypedEvent<
  [string, BigNumber],
  UserRequestForAffirmationEventObject
>;

export type UserRequestForAffirmationEventFilter =
  TypedEventFilter<UserRequestForAffirmationEvent>;

export interface DailyLimitChangedEventObject {
  newLimit: BigNumber;
}
export type DailyLimitChangedEvent = TypedEvent<
  [BigNumber],
  DailyLimitChangedEventObject
>;

export type DailyLimitChangedEventFilter =
  TypedEventFilter<DailyLimitChangedEvent>;

export interface ExecutionDailyLimitChangedEventObject {
  newLimit: BigNumber;
}
export type ExecutionDailyLimitChangedEvent = TypedEvent<
  [BigNumber],
  ExecutionDailyLimitChangedEventObject
>;

export type ExecutionDailyLimitChangedEventFilter =
  TypedEventFilter<ExecutionDailyLimitChangedEvent>;

export interface GasPriceChangedEventObject {
  gasPrice: BigNumber;
}
export type GasPriceChangedEvent = TypedEvent<
  [BigNumber],
  GasPriceChangedEventObject
>;

export type GasPriceChangedEventFilter = TypedEventFilter<GasPriceChangedEvent>;

export interface RequiredBlockConfirmationChangedEventObject {
  requiredBlockConfirmations: BigNumber;
}
export type RequiredBlockConfirmationChangedEvent = TypedEvent<
  [BigNumber],
  RequiredBlockConfirmationChangedEventObject
>;

export type RequiredBlockConfirmationChangedEventFilter =
  TypedEventFilter<RequiredBlockConfirmationChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface L1_xDaiForeignOmniBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1_xDaiForeignOmniBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    relayTokens(
      token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20token(overrides?: CallOverrides): Promise<[string]>;

    relayedMessages(
      _txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isChaiTokenEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    dsrBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isHDTokenBalanceAboveMinBalance(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredBlockConfirmations(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeSignatures(
      message: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minHDTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBridgeMode(
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    executionDailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTokenSwapAllowed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDaiTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinHDTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredSignatures(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setInterestCollectionPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestCollectionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorContract(overrides?: CallOverrides): Promise<[string]>;

    deployedAtBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    setInterestReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fixLockedSai(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDaiNeedsToBeInvested(overrides?: CallOverrides): Promise<[boolean]>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    halfDuplexErc20token(overrides?: CallOverrides): Promise<[string]>;

    setMinDaiTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chaiToken(overrides?: CallOverrides): Promise<[string]>;

    setRequiredBlockConfirmations(
      _blockConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _validatorContract: PromiseOrValue<string>,
      _erc20token: PromiseOrValue<string>,
      _requiredBlockConfirmations: PromiseOrValue<BigNumberish>,
      _gasPrice: PromiseOrValue<BigNumberish>,
      _dailyLimitMaxPerTxMinPerTxArray: PromiseOrValue<BigNumberish>[],
      _homeDailyLimitHomeMaxPerTxArray: PromiseOrValue<BigNumberish>[],
      _owner: PromiseOrValue<string>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _bridgeOnOtherSide: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investedAmountInDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    setGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestReceiver(overrides?: CallOverrides): Promise<[string]>;

    "initializeChaiToken(address)"(
      _interestReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initializeChaiToken()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chaiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    convertDaiToChai(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeChaiToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimalShift(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastInterestPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  relayTokens(
    token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20token(overrides?: CallOverrides): Promise<string>;

  relayedMessages(
    _txHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSpentPerDay(
    _day: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isChaiTokenEnabled(overrides?: CallOverrides): Promise<boolean>;

  dsrBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isHDTokenBalanceAboveMinBalance(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  setExecutionDailyLimit(
    _dailyLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

  requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

  executeSignatures(
    message: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minHDTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBridgeMode(overrides?: CallOverrides): Promise<string>;

  executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  totalExecutedPerDay(
    _day: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTokenSwapAllowed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  minDaiTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  claimTokens(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinHDTokenBalance(
    _minBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withinExecutionLimit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setInterestCollectionPeriod(
    period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestCollectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  validatorContract(overrides?: CallOverrides): Promise<string>;

  deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getBridgeInterfacesVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      major: BigNumber;
      minor: BigNumber;
      patch: BigNumber;
    }
  >;

  setInterestReceiver(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fixLockedSai(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payInterest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDaiNeedsToBeInvested(overrides?: CallOverrides): Promise<boolean>;

  setMinPerTx(
    _minPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  halfDuplexErc20token(overrides?: CallOverrides): Promise<string>;

  setMinDaiTokenBalance(
    _minBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chaiToken(overrides?: CallOverrides): Promise<string>;

  setRequiredBlockConfirmations(
    _blockConfirmations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDailyLimit(
    _dailyLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _validatorContract: PromiseOrValue<string>,
    _erc20token: PromiseOrValue<string>,
    _requiredBlockConfirmations: PromiseOrValue<BigNumberish>,
    _gasPrice: PromiseOrValue<BigNumberish>,
    _dailyLimitMaxPerTxMinPerTxArray: PromiseOrValue<BigNumberish>[],
    _homeDailyLimitHomeMaxPerTxArray: PromiseOrValue<BigNumberish>[],
    _owner: PromiseOrValue<string>,
    _decimalShift: PromiseOrValue<BigNumberish>,
    _bridgeOnOtherSide: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investedAmountInDai(overrides?: CallOverrides): Promise<BigNumber>;

  setGasPrice(
    _gasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPerTx(
    _maxPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestReceiver(overrides?: CallOverrides): Promise<string>;

  "initializeChaiToken(address)"(
    _interestReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initializeChaiToken()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chaiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  convertDaiToChai(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeChaiToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

  minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  withinLimit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastInterestPayment(overrides?: CallOverrides): Promise<BigNumber>;

  setExecutionMaxPerTx(
    _maxPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    relayTokens(
      token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20token(overrides?: CallOverrides): Promise<string>;

    relayedMessages(
      _txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChaiTokenEnabled(overrides?: CallOverrides): Promise<boolean>;

    dsrBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isHDTokenBalanceAboveMinBalance(
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

    requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    executeSignatures(
      message: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    minHDTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeMode(overrides?: CallOverrides): Promise<string>;

    executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenSwapAllowed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minDaiTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinHDTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokens(overrides?: CallOverrides): Promise<void>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setInterestCollectionPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    interestCollectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    validatorContract(overrides?: CallOverrides): Promise<string>;

    deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    setInterestReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fixLockedSai(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payInterest(overrides?: CallOverrides): Promise<void>;

    isDaiNeedsToBeInvested(overrides?: CallOverrides): Promise<boolean>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    halfDuplexErc20token(overrides?: CallOverrides): Promise<string>;

    setMinDaiTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chaiToken(overrides?: CallOverrides): Promise<string>;

    setRequiredBlockConfirmations(
      _blockConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _validatorContract: PromiseOrValue<string>,
      _erc20token: PromiseOrValue<string>,
      _requiredBlockConfirmations: PromiseOrValue<BigNumberish>,
      _gasPrice: PromiseOrValue<BigNumberish>,
      _dailyLimitMaxPerTxMinPerTxArray: PromiseOrValue<BigNumberish>[],
      _homeDailyLimitHomeMaxPerTxArray: PromiseOrValue<BigNumberish>[],
      _owner: PromiseOrValue<string>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _bridgeOnOtherSide: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    investedAmountInDai(overrides?: CallOverrides): Promise<BigNumber>;

    setGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    interestReceiver(overrides?: CallOverrides): Promise<string>;

    "initializeChaiToken(address)"(
      _interestReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeChaiToken()"(overrides?: CallOverrides): Promise<void>;

    chaiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    convertDaiToChai(overrides?: CallOverrides): Promise<void>;

    removeChaiToken(overrides?: CallOverrides): Promise<void>;

    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

    minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastInterestPayment(overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PaidInterest(address,uint256)"(
      to?: null,
      value?: null
    ): PaidInterestEventFilter;
    PaidInterest(to?: null, value?: null): PaidInterestEventFilter;

    "TokensSwapped(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TokensSwappedEventFilter;
    TokensSwapped(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TokensSwappedEventFilter;

    "RelayedMessage(address,uint256,bytes32)"(
      recipient?: null,
      value?: null,
      transactionHash?: null
    ): RelayedMessageEventFilter;
    RelayedMessage(
      recipient?: null,
      value?: null,
      transactionHash?: null
    ): RelayedMessageEventFilter;

    "UserRequestForAffirmation(address,uint256)"(
      recipient?: null,
      value?: null
    ): UserRequestForAffirmationEventFilter;
    UserRequestForAffirmation(
      recipient?: null,
      value?: null
    ): UserRequestForAffirmationEventFilter;

    "DailyLimitChanged(uint256)"(newLimit?: null): DailyLimitChangedEventFilter;
    DailyLimitChanged(newLimit?: null): DailyLimitChangedEventFilter;

    "ExecutionDailyLimitChanged(uint256)"(
      newLimit?: null
    ): ExecutionDailyLimitChangedEventFilter;
    ExecutionDailyLimitChanged(
      newLimit?: null
    ): ExecutionDailyLimitChangedEventFilter;

    "GasPriceChanged(uint256)"(gasPrice?: null): GasPriceChangedEventFilter;
    GasPriceChanged(gasPrice?: null): GasPriceChangedEventFilter;

    "RequiredBlockConfirmationChanged(uint256)"(
      requiredBlockConfirmations?: null
    ): RequiredBlockConfirmationChangedEventFilter;
    RequiredBlockConfirmationChanged(
      requiredBlockConfirmations?: null
    ): RequiredBlockConfirmationChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    relayTokens(
      token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20token(overrides?: CallOverrides): Promise<BigNumber>;

    relayedMessages(
      _txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChaiTokenEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    dsrBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isHDTokenBalanceAboveMinBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

    requiredBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    executeSignatures(
      message: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minHDTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeMode(overrides?: CallOverrides): Promise<BigNumber>;

    executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenSwapAllowed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minDaiTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinHDTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    requiredSignatures(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setInterestCollectionPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestCollectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    validatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    deployedAtBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<BigNumber>;

    setInterestReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fixLockedSai(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDaiNeedsToBeInvested(overrides?: CallOverrides): Promise<BigNumber>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    halfDuplexErc20token(overrides?: CallOverrides): Promise<BigNumber>;

    setMinDaiTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chaiToken(overrides?: CallOverrides): Promise<BigNumber>;

    setRequiredBlockConfirmations(
      _blockConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _validatorContract: PromiseOrValue<string>,
      _erc20token: PromiseOrValue<string>,
      _requiredBlockConfirmations: PromiseOrValue<BigNumberish>,
      _gasPrice: PromiseOrValue<BigNumberish>,
      _dailyLimitMaxPerTxMinPerTxArray: PromiseOrValue<BigNumberish>[],
      _homeDailyLimitHomeMaxPerTxArray: PromiseOrValue<BigNumberish>[],
      _owner: PromiseOrValue<string>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _bridgeOnOtherSide: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investedAmountInDai(overrides?: CallOverrides): Promise<BigNumber>;

    setGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "initializeChaiToken(address)"(
      _interestReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initializeChaiToken()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chaiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    convertDaiToChai(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeChaiToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

    minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastInterestPayment(overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    relayTokens(
      token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayedMessages(
      _txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChaiTokenEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dsrBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHDTokenBalanceAboveMinBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredBlockConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeSignatures(
      message: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minHDTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridgeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionDailyLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenSwapAllowed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDaiTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinHDTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredSignatures(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInterestCollectionPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestCollectionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployedAtBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInterestReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fixLockedSai(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDaiNeedsToBeInvested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    halfDuplexErc20token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinDaiTokenBalance(
      _minBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chaiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequiredBlockConfirmations(
      _blockConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _validatorContract: PromiseOrValue<string>,
      _erc20token: PromiseOrValue<string>,
      _requiredBlockConfirmations: PromiseOrValue<BigNumberish>,
      _gasPrice: PromiseOrValue<BigNumberish>,
      _dailyLimitMaxPerTxMinPerTxArray: PromiseOrValue<BigNumberish>[],
      _homeDailyLimitHomeMaxPerTxArray: PromiseOrValue<BigNumberish>[],
      _owner: PromiseOrValue<string>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _bridgeOnOtherSide: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investedAmountInDai(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGasPrice(
      _gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initializeChaiToken(address)"(
      _interestReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initializeChaiToken()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chaiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertDaiToChai(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeChaiToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimalShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastInterestPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
