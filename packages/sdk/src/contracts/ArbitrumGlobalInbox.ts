/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface ArbitrumGlobalInboxInterface extends utils.Interface {
  functions: {
    "FAILED_TRANSFER()": FunctionFragment;
    "deployL2ContractPair(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "depositERC20Message(address,address,address,uint256)": FunctionFragment;
    "depositERC721Message(address,address,address,uint256)": FunctionFragment;
    "depositEthMessage(address,address)": FunctionFragment;
    "getERC20Balance(address,address)": FunctionFragment;
    "getERC721Tokens(address,address)": FunctionFragment;
    "getEthBalance(address)": FunctionFragment;
    "getInbox(address)": FunctionFragment;
    "getPaymentOwner(address,uint256)": FunctionFragment;
    "hasERC721(address,address,uint256)": FunctionFragment;
    "isPairedContract(address,address)": FunctionFragment;
    "ownedERC20s(address)": FunctionFragment;
    "ownedERC721s(address)": FunctionFragment;
    "sendInitializationMessage(bytes)": FunctionFragment;
    "sendL2Message(address,bytes)": FunctionFragment;
    "sendL2MessageFromOrigin(address,bytes)": FunctionFragment;
    "sendMessages(bytes,uint256,uint256)": FunctionFragment;
    "transferPayment(address,address,uint256)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawEth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FAILED_TRANSFER"
      | "deployL2ContractPair"
      | "depositERC20Message"
      | "depositERC721Message"
      | "depositEthMessage"
      | "getERC20Balance"
      | "getERC721Tokens"
      | "getEthBalance"
      | "getInbox"
      | "getPaymentOwner"
      | "hasERC721"
      | "isPairedContract"
      | "ownedERC20s"
      | "ownedERC721s"
      | "sendInitializationMessage"
      | "sendL2Message"
      | "sendL2MessageFromOrigin"
      | "sendMessages"
      | "transferPayment"
      | "withdrawERC20"
      | "withdrawERC721"
      | "withdrawEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FAILED_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployL2ContractPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20Message",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721Message",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEthMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC20Balance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721Tokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInbox",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPairedContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedERC20s",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedERC721s",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendInitializationMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2Message",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2MessageFromOrigin",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessages",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FAILED_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployL2ContractPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEthMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC20Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPairedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedERC721s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendInitializationMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2MessageFromOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;

  events: {
    "BuddyContractDeployed(address,bytes)": EventFragment;
    "BuddyContractPair(address,address)": EventFragment;
    "MessageDelivered(address,uint8,address,uint256,bytes)": EventFragment;
    "MessageDeliveredFromOrigin(address,uint8,address,uint256)": EventFragment;
    "PaymentTransfer(uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuddyContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuddyContractPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDeliveredFromOrigin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTransfer"): EventFragment;
}

export interface BuddyContractDeployedEventObject {
  sender: string;
  data: string;
}
export type BuddyContractDeployedEvent = TypedEvent<
  [string, string],
  BuddyContractDeployedEventObject
>;

export type BuddyContractDeployedEventFilter =
  TypedEventFilter<BuddyContractDeployedEvent>;

export interface BuddyContractPairEventObject {
  sender: string;
  data: string;
}
export type BuddyContractPairEvent = TypedEvent<
  [string, string],
  BuddyContractPairEventObject
>;

export type BuddyContractPairEventFilter =
  TypedEventFilter<BuddyContractPairEvent>;

export interface MessageDeliveredEventObject {
  chain: string;
  kind: number;
  sender: string;
  inboxSeqNum: BigNumber;
  data: string;
}
export type MessageDeliveredEvent = TypedEvent<
  [string, number, string, BigNumber, string],
  MessageDeliveredEventObject
>;

export type MessageDeliveredEventFilter =
  TypedEventFilter<MessageDeliveredEvent>;

export interface MessageDeliveredFromOriginEventObject {
  chain: string;
  kind: number;
  sender: string;
  inboxSeqNum: BigNumber;
}
export type MessageDeliveredFromOriginEvent = TypedEvent<
  [string, number, string, BigNumber],
  MessageDeliveredFromOriginEventObject
>;

export type MessageDeliveredFromOriginEventFilter =
  TypedEventFilter<MessageDeliveredFromOriginEvent>;

export interface PaymentTransferEventObject {
  messageIndex: BigNumber;
  originalOwner: string;
  prevOwner: string;
  newOwner: string;
}
export type PaymentTransferEvent = TypedEvent<
  [BigNumber, string, string, string],
  PaymentTransferEventObject
>;

export type PaymentTransferEventFilter = TypedEventFilter<PaymentTransferEvent>;

export interface ArbitrumGlobalInbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrumGlobalInboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FAILED_TRANSFER(overrides?: CallOverrides): Promise<[string]>;

    deployL2ContractPair(
      chain: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      contractData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20Message(
      chain: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721Message(
      chain: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEthMessage(
      chain: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getERC20Balance(
      _tokenContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getERC721Tokens(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEthBalance(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInbox(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPaymentOwner(
      originalOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasERC721(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPairedContract(
      _tokenContract: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    ownedERC20s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    ownedERC721s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    sendInitializationMessage(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL2Message(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL2MessageFromOrigin(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessages(
      messages: PromiseOrValue<BytesLike>,
      initialMaxSendCount: PromiseOrValue<BigNumberish>,
      finalMaxSendCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPayment(
      originalOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _tokenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _erc721: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FAILED_TRANSFER(overrides?: CallOverrides): Promise<string>;

  deployL2ContractPair(
    chain: PromiseOrValue<string>,
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    payment: PromiseOrValue<BigNumberish>,
    contractData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20Message(
    chain: PromiseOrValue<string>,
    erc20: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721Message(
    chain: PromiseOrValue<string>,
    erc721: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEthMessage(
    chain: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getERC20Balance(
    _tokenContract: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getERC721Tokens(
    _erc721: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEthBalance(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInbox(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getPaymentOwner(
    originalOwner: PromiseOrValue<string>,
    messageIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasERC721(
    _erc721: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPairedContract(
    _tokenContract: PromiseOrValue<string>,
    _chain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  ownedERC20s(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ownedERC721s(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  sendInitializationMessage(
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL2Message(
    chain: PromiseOrValue<string>,
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL2MessageFromOrigin(
    chain: PromiseOrValue<string>,
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessages(
    messages: PromiseOrValue<BytesLike>,
    initialMaxSendCount: PromiseOrValue<BigNumberish>,
    finalMaxSendCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPayment(
    originalOwner: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    messageIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _tokenContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _erc721: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FAILED_TRANSFER(overrides?: CallOverrides): Promise<string>;

    deployL2ContractPair(
      chain: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      contractData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20Message(
      chain: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721Message(
      chain: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEthMessage(
      chain: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getERC20Balance(
      _tokenContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721Tokens(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEthBalance(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInbox(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPaymentOwner(
      originalOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasERC721(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPairedContract(
      _tokenContract: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    ownedERC20s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ownedERC721s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    sendInitializationMessage(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendL2Message(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendL2MessageFromOrigin(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessages(
      messages: PromiseOrValue<BytesLike>,
      initialMaxSendCount: PromiseOrValue<BigNumberish>,
      finalMaxSendCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPayment(
      originalOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _tokenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _erc721: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BuddyContractDeployed(address,bytes)"(
      sender?: PromiseOrValue<string> | null,
      data?: null
    ): BuddyContractDeployedEventFilter;
    BuddyContractDeployed(
      sender?: PromiseOrValue<string> | null,
      data?: null
    ): BuddyContractDeployedEventFilter;

    "BuddyContractPair(address,address)"(
      sender?: PromiseOrValue<string> | null,
      data?: null
    ): BuddyContractPairEventFilter;
    BuddyContractPair(
      sender?: PromiseOrValue<string> | null,
      data?: null
    ): BuddyContractPairEventFilter;

    "MessageDelivered(address,uint8,address,uint256,bytes)"(
      chain?: PromiseOrValue<string> | null,
      kind?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      inboxSeqNum?: null,
      data?: null
    ): MessageDeliveredEventFilter;
    MessageDelivered(
      chain?: PromiseOrValue<string> | null,
      kind?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      inboxSeqNum?: null,
      data?: null
    ): MessageDeliveredEventFilter;

    "MessageDeliveredFromOrigin(address,uint8,address,uint256)"(
      chain?: PromiseOrValue<string> | null,
      kind?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      inboxSeqNum?: null
    ): MessageDeliveredFromOriginEventFilter;
    MessageDeliveredFromOrigin(
      chain?: PromiseOrValue<string> | null,
      kind?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      inboxSeqNum?: null
    ): MessageDeliveredFromOriginEventFilter;

    "PaymentTransfer(uint256,address,address,address)"(
      messageIndex?: null,
      originalOwner?: null,
      prevOwner?: null,
      newOwner?: null
    ): PaymentTransferEventFilter;
    PaymentTransfer(
      messageIndex?: null,
      originalOwner?: null,
      prevOwner?: null,
      newOwner?: null
    ): PaymentTransferEventFilter;
  };

  estimateGas: {
    FAILED_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    deployL2ContractPair(
      chain: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      contractData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20Message(
      chain: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721Message(
      chain: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEthMessage(
      chain: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getERC20Balance(
      _tokenContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721Tokens(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthBalance(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInbox(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentOwner(
      originalOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasERC721(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPairedContract(
      _tokenContract: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedERC20s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedERC721s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendInitializationMessage(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL2Message(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL2MessageFromOrigin(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessages(
      messages: PromiseOrValue<BytesLike>,
      initialMaxSendCount: PromiseOrValue<BigNumberish>,
      finalMaxSendCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPayment(
      originalOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _tokenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _erc721: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FAILED_TRANSFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployL2ContractPair(
      chain: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      contractData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20Message(
      chain: PromiseOrValue<string>,
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721Message(
      chain: PromiseOrValue<string>,
      erc721: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEthMessage(
      chain: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getERC20Balance(
      _tokenContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721Tokens(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInbox(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentOwner(
      originalOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasERC721(
      _erc721: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPairedContract(
      _tokenContract: PromiseOrValue<string>,
      _chain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedERC20s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedERC721s(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendInitializationMessage(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL2Message(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL2MessageFromOrigin(
      chain: PromiseOrValue<string>,
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessages(
      messages: PromiseOrValue<BytesLike>,
      initialMaxSendCount: PromiseOrValue<BigNumberish>,
      finalMaxSendCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPayment(
      originalOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      messageIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _tokenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _erc721: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
