/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface SwapUtilsInterface extends utils.Interface {
  functions: {
    "A_PRECISION()": FunctionFragment;
    "MAX_A()": FunctionFragment;
    "MAX_ADMIN_FEE()": FunctionFragment;
    "MAX_SWAP_FEE()": FunctionFragment;
    "MAX_WITHDRAW_FEE()": FunctionFragment;
    "POOL_PRECISION_DECIMALS()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "A_PRECISION"
      | "MAX_A"
      | "MAX_ADMIN_FEE"
      | "MAX_SWAP_FEE"
      | "MAX_WITHDRAW_FEE"
      | "POOL_PRECISION_DECIMALS"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "A_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_A", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ADMIN_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SWAP_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_PRECISION_DECIMALS",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "A_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ADMIN_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SWAP_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_PRECISION_DECIMALS",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256[],uint256[],uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256[],uint256)": EventFragment;
    "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)": EventFragment;
    "RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenSwap(address,uint256,uint256,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSwap"): EventFragment;
}

export interface AddLiquidityEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  fees: BigNumber[];
  invariant: BigNumber;
  lpTokenSupply: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface RemoveLiquidityEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  lpTokenSupply: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityImbalanceEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  fees: BigNumber[];
  invariant: BigNumber;
  lpTokenSupply: BigNumber;
}
export type RemoveLiquidityImbalanceEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
  RemoveLiquidityImbalanceEventObject
>;

export type RemoveLiquidityImbalanceEventFilter =
  TypedEventFilter<RemoveLiquidityImbalanceEvent>;

export interface RemoveLiquidityOneEventObject {
  provider: string;
  lpTokenAmount: BigNumber;
  lpTokenSupply: BigNumber;
  boughtId: BigNumber;
  tokensBought: BigNumber;
}
export type RemoveLiquidityOneEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveLiquidityOneEventObject
>;

export type RemoveLiquidityOneEventFilter =
  TypedEventFilter<RemoveLiquidityOneEvent>;

export interface TokenSwapEventObject {
  buyer: string;
  tokensSold: BigNumber;
  tokensBought: BigNumber;
  soldId: BigNumber;
  boughtId: BigNumber;
}
export type TokenSwapEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  TokenSwapEventObject
>;

export type TokenSwapEventFilter = TypedEventFilter<TokenSwapEvent>;

export interface SwapUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    A_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_A(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SWAP_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[number]>;
  };

  A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_A(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_A(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AddLiquidity(address,uint256[],uint256[],uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null
    ): AddLiquidityEventFilter;

    "RemoveLiquidity(address,uint256[],uint256)"(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      lpTokenSupply?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      lpTokenSupply?: null
    ): RemoveLiquidityEventFilter;

    "RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null
    ): RemoveLiquidityImbalanceEventFilter;
    RemoveLiquidityImbalance(
      provider?: PromiseOrValue<string> | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null
    ): RemoveLiquidityImbalanceEventFilter;

    "RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      lpTokenAmount?: null,
      lpTokenSupply?: null,
      boughtId?: null,
      tokensBought?: null
    ): RemoveLiquidityOneEventFilter;
    RemoveLiquidityOne(
      provider?: PromiseOrValue<string> | null,
      lpTokenAmount?: null,
      lpTokenSupply?: null,
      boughtId?: null,
      tokensBought?: null
    ): RemoveLiquidityOneEventFilter;

    "TokenSwap(address,uint256,uint256,uint128,uint128)"(
      buyer?: PromiseOrValue<string> | null,
      tokensSold?: null,
      tokensBought?: null,
      soldId?: null,
      boughtId?: null
    ): TokenSwapEventFilter;
    TokenSwap(
      buyer?: PromiseOrValue<string> | null,
      tokensSold?: null,
      tokensBought?: null,
      soldId?: null,
      boughtId?: null
    ): TokenSwapEventFilter;
  };

  estimateGas: {
    A_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_A(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    A_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ADMIN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SWAP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
