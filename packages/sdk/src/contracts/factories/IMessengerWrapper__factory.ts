/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMessengerWrapper,
  IMessengerWrapperInterface,
} from "../IMessengerWrapper.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "rootHashes",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "destinationChainIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "totalAmounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "rootCommittedAts",
        type: "uint256[]",
      },
    ],
    name: "confirmRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "sendCrossDomainMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1BridgeCaller",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "verifySender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMessengerWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): IMessengerWrapperInterface {
    return new utils.Interface(_abi) as IMessengerWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMessengerWrapper {
    return new Contract(address, _abi, signerOrProvider) as IMessengerWrapper;
  }
}
