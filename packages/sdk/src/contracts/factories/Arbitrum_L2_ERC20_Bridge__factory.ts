/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Arbitrum_L2_ERC20_Bridge,
  Arbitrum_L2_ERC20_BridgeInterface,
} from "../Arbitrum_L2_ERC20_Bridge.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_l2Messenger",
        type: "address",
      },
      {
        internalType: "address",
        name: "_l1ERC20BridgeAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "l1ERC20BridgeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2Messenger",
    outputs: [
      {
        internalType: "contract IArbSys",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_l1TokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_l2TokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class Arbitrum_L2_ERC20_Bridge__factory {
  static readonly abi = _abi;
  static createInterface(): Arbitrum_L2_ERC20_BridgeInterface {
    return new utils.Interface(_abi) as Arbitrum_L2_ERC20_BridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Arbitrum_L2_ERC20_Bridge {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Arbitrum_L2_ERC20_Bridge;
  }
}
