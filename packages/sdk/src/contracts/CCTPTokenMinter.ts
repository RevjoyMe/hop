/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface CCTPTokenMinterInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addLocalTokenMessenger(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "burnLimitsPerMessage(address)": FunctionFragment;
    "getLocalToken(uint32,bytes32)": FunctionFragment;
    "linkTokenPair(address,uint32,bytes32)": FunctionFragment;
    "localTokenMessenger()": FunctionFragment;
    "mint(uint32,bytes32,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "remoteTokensToLocalTokens(bytes32)": FunctionFragment;
    "removeLocalTokenMessenger()": FunctionFragment;
    "rescueERC20(address,address,uint256)": FunctionFragment;
    "rescuer()": FunctionFragment;
    "setMaxBurnAmountPerMessage(address,uint256)": FunctionFragment;
    "setTokenController(address)": FunctionFragment;
    "tokenController()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlinkTokenPair(address,uint32,bytes32)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePauser(address)": FunctionFragment;
    "updateRescuer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addLocalTokenMessenger"
      | "burn"
      | "burnLimitsPerMessage"
      | "getLocalToken"
      | "linkTokenPair"
      | "localTokenMessenger"
      | "mint"
      | "owner"
      | "pause"
      | "paused"
      | "pauser"
      | "pendingOwner"
      | "remoteTokensToLocalTokens"
      | "removeLocalTokenMessenger"
      | "rescueERC20"
      | "rescuer"
      | "setMaxBurnAmountPerMessage"
      | "setTokenController"
      | "tokenController"
      | "transferOwnership"
      | "unlinkTokenPair"
      | "unpause"
      | "updatePauser"
      | "updateRescuer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLocalTokenMessenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLimitsPerMessage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkTokenPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "localTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remoteTokensToLocalTokens",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLocalTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "rescuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxBurnAmountPerMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkTokenPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRescuer",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnLimitsPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteTokensToLocalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBurnAmountPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRescuer",
    data: BytesLike
  ): Result;

  events: {
    "LocalTokenMessengerAdded(address)": EventFragment;
    "LocalTokenMessengerRemoved(address)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause()": EventFragment;
    "PauserChanged(address)": EventFragment;
    "RescuerChanged(address)": EventFragment;
    "SetBurnLimitPerMessage(address,uint256)": EventFragment;
    "SetTokenController(address)": EventFragment;
    "TokenPairLinked(address,uint32,bytes32)": EventFragment;
    "TokenPairUnlinked(address,uint32,bytes32)": EventFragment;
    "Unpause()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LocalTokenMessengerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalTokenMessengerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescuerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBurnLimitPerMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPairLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPairUnlinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
}

export interface LocalTokenMessengerAddedEventObject {
  localTokenMessenger: string;
}
export type LocalTokenMessengerAddedEvent = TypedEvent<
  [string],
  LocalTokenMessengerAddedEventObject
>;

export type LocalTokenMessengerAddedEventFilter =
  TypedEventFilter<LocalTokenMessengerAddedEvent>;

export interface LocalTokenMessengerRemovedEventObject {
  localTokenMessenger: string;
}
export type LocalTokenMessengerRemovedEvent = TypedEvent<
  [string],
  LocalTokenMessengerRemovedEventObject
>;

export type LocalTokenMessengerRemovedEventFilter =
  TypedEventFilter<LocalTokenMessengerRemovedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface PauserChangedEventObject {
  newAddress: string;
}
export type PauserChangedEvent = TypedEvent<[string], PauserChangedEventObject>;

export type PauserChangedEventFilter = TypedEventFilter<PauserChangedEvent>;

export interface RescuerChangedEventObject {
  newRescuer: string;
}
export type RescuerChangedEvent = TypedEvent<
  [string],
  RescuerChangedEventObject
>;

export type RescuerChangedEventFilter = TypedEventFilter<RescuerChangedEvent>;

export interface SetBurnLimitPerMessageEventObject {
  token: string;
  burnLimitPerMessage: BigNumber;
}
export type SetBurnLimitPerMessageEvent = TypedEvent<
  [string, BigNumber],
  SetBurnLimitPerMessageEventObject
>;

export type SetBurnLimitPerMessageEventFilter =
  TypedEventFilter<SetBurnLimitPerMessageEvent>;

export interface SetTokenControllerEventObject {
  tokenController: string;
}
export type SetTokenControllerEvent = TypedEvent<
  [string],
  SetTokenControllerEventObject
>;

export type SetTokenControllerEventFilter =
  TypedEventFilter<SetTokenControllerEvent>;

export interface TokenPairLinkedEventObject {
  localToken: string;
  remoteDomain: number;
  remoteToken: string;
}
export type TokenPairLinkedEvent = TypedEvent<
  [string, number, string],
  TokenPairLinkedEventObject
>;

export type TokenPairLinkedEventFilter = TypedEventFilter<TokenPairLinkedEvent>;

export interface TokenPairUnlinkedEventObject {
  localToken: string;
  remoteDomain: number;
  remoteToken: string;
}
export type TokenPairUnlinkedEvent = TypedEvent<
  [string, number, string],
  TokenPairUnlinkedEventObject
>;

export type TokenPairUnlinkedEventFilter =
  TypedEventFilter<TokenPairUnlinkedEvent>;

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface CCTPTokenMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CCTPTokenMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      burnToken: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnLimitsPerMessage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLocalToken(
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    linkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    localTokenMessenger(overrides?: CallOverrides): Promise<[string]>;

    mint(
      sourceDomain: PromiseOrValue<BigNumberish>,
      burnToken: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    remoteTokensToLocalTokens(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueERC20(
      tokenContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescuer(overrides?: CallOverrides): Promise<[string]>;

    setMaxBurnAmountPerMessage(
      localToken: PromiseOrValue<string>,
      burnLimitPerMessage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenController(
      newTokenController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenController(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlinkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePauser(
      _newPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRescuer(
      newRescuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLocalTokenMessenger(
    newLocalTokenMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    burnToken: PromiseOrValue<string>,
    burnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnLimitsPerMessage(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLocalToken(
    remoteDomain: PromiseOrValue<BigNumberish>,
    remoteToken: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  linkTokenPair(
    localToken: PromiseOrValue<string>,
    remoteDomain: PromiseOrValue<BigNumberish>,
    remoteToken: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  localTokenMessenger(overrides?: CallOverrides): Promise<string>;

  mint(
    sourceDomain: PromiseOrValue<BigNumberish>,
    burnToken: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  remoteTokensToLocalTokens(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeLocalTokenMessenger(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueERC20(
    tokenContract: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescuer(overrides?: CallOverrides): Promise<string>;

  setMaxBurnAmountPerMessage(
    localToken: PromiseOrValue<string>,
    burnLimitPerMessage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenController(
    newTokenController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenController(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlinkTokenPair(
    localToken: PromiseOrValue<string>,
    remoteDomain: PromiseOrValue<BigNumberish>,
    remoteToken: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePauser(
    _newPauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRescuer(
    newRescuer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      burnToken: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnLimitsPerMessage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalToken(
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    linkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    localTokenMessenger(overrides?: CallOverrides): Promise<string>;

    mint(
      sourceDomain: PromiseOrValue<BigNumberish>,
      burnToken: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    remoteTokensToLocalTokens(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeLocalTokenMessenger(overrides?: CallOverrides): Promise<void>;

    rescueERC20(
      tokenContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescuer(overrides?: CallOverrides): Promise<string>;

    setMaxBurnAmountPerMessage(
      localToken: PromiseOrValue<string>,
      burnLimitPerMessage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenController(
      newTokenController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenController(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePauser(
      _newPauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRescuer(
      newRescuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LocalTokenMessengerAdded(address)"(
      localTokenMessenger?: null
    ): LocalTokenMessengerAddedEventFilter;
    LocalTokenMessengerAdded(
      localTokenMessenger?: null
    ): LocalTokenMessengerAddedEventFilter;

    "LocalTokenMessengerRemoved(address)"(
      localTokenMessenger?: null
    ): LocalTokenMessengerRemovedEventFilter;
    LocalTokenMessengerRemoved(
      localTokenMessenger?: null
    ): LocalTokenMessengerRemovedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Pause()"(): PauseEventFilter;
    Pause(): PauseEventFilter;

    "PauserChanged(address)"(
      newAddress?: PromiseOrValue<string> | null
    ): PauserChangedEventFilter;
    PauserChanged(
      newAddress?: PromiseOrValue<string> | null
    ): PauserChangedEventFilter;

    "RescuerChanged(address)"(
      newRescuer?: PromiseOrValue<string> | null
    ): RescuerChangedEventFilter;
    RescuerChanged(
      newRescuer?: PromiseOrValue<string> | null
    ): RescuerChangedEventFilter;

    "SetBurnLimitPerMessage(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      burnLimitPerMessage?: null
    ): SetBurnLimitPerMessageEventFilter;
    SetBurnLimitPerMessage(
      token?: PromiseOrValue<string> | null,
      burnLimitPerMessage?: null
    ): SetBurnLimitPerMessageEventFilter;

    "SetTokenController(address)"(
      tokenController?: null
    ): SetTokenControllerEventFilter;
    SetTokenController(tokenController?: null): SetTokenControllerEventFilter;

    "TokenPairLinked(address,uint32,bytes32)"(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null
    ): TokenPairLinkedEventFilter;
    TokenPairLinked(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null
    ): TokenPairLinkedEventFilter;

    "TokenPairUnlinked(address,uint32,bytes32)"(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null
    ): TokenPairUnlinkedEventFilter;
    TokenPairUnlinked(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null
    ): TokenPairUnlinkedEventFilter;

    "Unpause()"(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      burnToken: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnLimitsPerMessage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalToken(
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    localTokenMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      sourceDomain: PromiseOrValue<BigNumberish>,
      burnToken: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    remoteTokensToLocalTokens(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueERC20(
      tokenContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescuer(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxBurnAmountPerMessage(
      localToken: PromiseOrValue<string>,
      burnLimitPerMessage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenController(
      newTokenController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenController(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlinkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePauser(
      _newPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRescuer(
      newRescuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      burnToken: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnLimitsPerMessage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalToken(
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    localTokenMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      sourceDomain: PromiseOrValue<BigNumberish>,
      burnToken: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteTokensToLocalTokens(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      tokenContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxBurnAmountPerMessage(
      localToken: PromiseOrValue<string>,
      burnLimitPerMessage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenController(
      newTokenController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlinkTokenPair(
      localToken: PromiseOrValue<string>,
      remoteDomain: PromiseOrValue<BigNumberish>,
      remoteToken: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePauser(
      _newPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRescuer(
      newRescuer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
