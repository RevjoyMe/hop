/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface ArbitrumMessengerWrapperInterface extends utils.Interface {
  functions: {
    "canConfirmRoot(address,bytes32,uint256,uint256)": FunctionFragment;
    "claimFunds(address,uint256)": FunctionFragment;
    "confirmRoots(bytes32[],uint256[],uint256[],uint256[])": FunctionFragment;
    "isRootConfirmation()": FunctionFragment;
    "l1BridgeAddress()": FunctionFragment;
    "l1MessengerAddress()": FunctionFragment;
    "l2BridgeAddress()": FunctionFragment;
    "l2ChainId()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendCrossDomainMessage(bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifySender(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canConfirmRoot"
      | "claimFunds"
      | "confirmRoots"
      | "isRootConfirmation"
      | "l1BridgeAddress"
      | "l1MessengerAddress"
      | "l2BridgeAddress"
      | "l2ChainId"
      | "owner"
      | "renounceOwnership"
      | "sendCrossDomainMessage"
      | "transferOwnership"
      | "verifySender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canConfirmRoot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRoots",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRootConfirmation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1MessengerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2ChainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendCrossDomainMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySender",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "canConfirmRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRootConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1MessengerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2ChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCrossDomainMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySender",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ArbitrumMessengerWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrumMessengerWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRootConfirmation(overrides?: CallOverrides): Promise<[boolean]>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<[string]>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l2ChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canConfirmRoot(
    l1Bridge: PromiseOrValue<string>,
    rootHash: PromiseOrValue<BytesLike>,
    totalAmount: PromiseOrValue<BigNumberish>,
    challengePeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimFunds(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmRoots(
    rootHashes: PromiseOrValue<BytesLike>[],
    destinationChainIds: PromiseOrValue<BigNumberish>[],
    totalAmounts: PromiseOrValue<BigNumberish>[],
    rootCommittedAts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRootConfirmation(overrides?: CallOverrides): Promise<boolean>;

  l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l1MessengerAddress(overrides?: CallOverrides): Promise<string>;

  l2BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendCrossDomainMessage(
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySender(
    l1BridgeCaller: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isRootConfirmation(overrides?: CallOverrides): Promise<boolean>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<string>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRootConfirmation(overrides?: CallOverrides): Promise<BigNumber>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l1MessengerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canConfirmRoot(
      l1Bridge: PromiseOrValue<string>,
      rootHash: PromiseOrValue<BytesLike>,
      totalAmount: PromiseOrValue<BigNumberish>,
      challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmRoots(
      rootHashes: PromiseOrValue<BytesLike>[],
      destinationChainIds: PromiseOrValue<BigNumberish>[],
      totalAmounts: PromiseOrValue<BigNumberish>[],
      rootCommittedAts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRootConfirmation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1MessengerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendCrossDomainMessage(
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySender(
      l1BridgeCaller: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
