/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface L1_HopCCTPImplementationInterface extends utils.Interface {
  functions: {
    "activeChainIds(uint256)": FunctionFragment;
    "cctp()": FunctionFragment;
    "destinationDomains(uint256)": FunctionFragment;
    "feeCollectorAddress()": FunctionFragment;
    "minBonderFee()": FunctionFragment;
    "nativeToken()": FunctionFragment;
    "send(uint256,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeChainIds"
      | "cctp"
      | "destinationDomains"
      | "feeCollectorAddress"
      | "minBonderFee"
      | "nativeToken"
      | "send"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeChainIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cctp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "destinationDomains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollectorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBonderFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cctp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "destinationDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBonderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;

  events: {
    "CCTPTransferSent(uint64,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CCTPTransferSent"): EventFragment;
}

export interface CCTPTransferSentEventObject {
  cctpNonce: BigNumber;
  chainId: BigNumber;
  recipient: string;
  amount: BigNumber;
  bonderFee: BigNumber;
}
export type CCTPTransferSentEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  CCTPTransferSentEventObject
>;

export type CCTPTransferSentEventFilter =
  TypedEventFilter<CCTPTransferSentEvent>;

export interface L1_HopCCTPImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1_HopCCTPImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cctp(overrides?: CallOverrides): Promise<[string]>;

    destinationDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    feeCollectorAddress(overrides?: CallOverrides): Promise<[string]>;

    minBonderFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeToken(overrides?: CallOverrides): Promise<[string]>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activeChainIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cctp(overrides?: CallOverrides): Promise<string>;

  destinationDomains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  feeCollectorAddress(overrides?: CallOverrides): Promise<string>;

  minBonderFee(overrides?: CallOverrides): Promise<BigNumber>;

  nativeToken(overrides?: CallOverrides): Promise<string>;

  send(
    chainId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    bonderFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cctp(overrides?: CallOverrides): Promise<string>;

    destinationDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    feeCollectorAddress(overrides?: CallOverrides): Promise<string>;

    minBonderFee(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<string>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CCTPTransferSent(uint64,uint256,address,uint256,uint256)"(
      cctpNonce?: PromiseOrValue<BigNumberish> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      bonderFee?: null
    ): CCTPTransferSentEventFilter;
    CCTPTransferSent(
      cctpNonce?: PromiseOrValue<BigNumberish> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      bonderFee?: null
    ): CCTPTransferSentEventFilter;
  };

  estimateGas: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cctp(overrides?: CallOverrides): Promise<BigNumber>;

    destinationDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeCollectorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderFee(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cctp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destinationDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollectorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBonderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      bonderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
