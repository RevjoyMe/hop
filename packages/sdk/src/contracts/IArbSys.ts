/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface IArbSysInterface extends utils.Interface {
  functions: {
    "arbOSVersion()": FunctionFragment;
    "getTransactionCount(address)": FunctionFragment;
    "sendTxToL1(address,bytes)": FunctionFragment;
    "withdrawEth(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arbOSVersion"
      | "getTransactionCount"
      | "sendTxToL1"
      | "withdrawEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbOSVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTxToL1",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbOSVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTxToL1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;

  events: {
    "ERC20Withdrawal(address,address,uint256)": EventFragment;
    "ERC721Withdrawal(address,address,uint256)": EventFragment;
    "EthWithdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawal"): EventFragment;
}

export interface ERC20WithdrawalEventObject {
  destAddr: string;
  tokenAddr: string;
  amount: BigNumber;
}
export type ERC20WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20WithdrawalEventObject
>;

export type ERC20WithdrawalEventFilter = TypedEventFilter<ERC20WithdrawalEvent>;

export interface ERC721WithdrawalEventObject {
  destAddr: string;
  tokenAddr: string;
  id: BigNumber;
}
export type ERC721WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  ERC721WithdrawalEventObject
>;

export type ERC721WithdrawalEventFilter =
  TypedEventFilter<ERC721WithdrawalEvent>;

export interface EthWithdrawalEventObject {
  destAddr: string;
  amount: BigNumber;
}
export type EthWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  EthWithdrawalEventObject
>;

export type EthWithdrawalEventFilter = TypedEventFilter<EthWithdrawalEvent>;

export interface IArbSys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IArbSysInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbOSVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendTxToL1(
      destAddr: PromiseOrValue<string>,
      calldataForL1: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      dest: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionCount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendTxToL1(
    destAddr: PromiseOrValue<string>,
    calldataForL1: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    dest: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendTxToL1(
      destAddr: PromiseOrValue<string>,
      calldataForL1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20Withdrawal(address,address,uint256)"(
      destAddr?: PromiseOrValue<string> | null,
      tokenAddr?: PromiseOrValue<string> | null,
      amount?: null
    ): ERC20WithdrawalEventFilter;
    ERC20Withdrawal(
      destAddr?: PromiseOrValue<string> | null,
      tokenAddr?: PromiseOrValue<string> | null,
      amount?: null
    ): ERC20WithdrawalEventFilter;

    "ERC721Withdrawal(address,address,uint256)"(
      destAddr?: PromiseOrValue<string> | null,
      tokenAddr?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721WithdrawalEventFilter;
    ERC721Withdrawal(
      destAddr?: PromiseOrValue<string> | null,
      tokenAddr?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721WithdrawalEventFilter;

    "EthWithdrawal(address,uint256)"(
      destAddr?: PromiseOrValue<string> | null,
      amount?: null
    ): EthWithdrawalEventFilter;
    EthWithdrawal(
      destAddr?: PromiseOrValue<string> | null,
      amount?: null
    ): EthWithdrawalEventFilter;
  };

  estimateGas: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendTxToL1(
      destAddr: PromiseOrValue<string>,
      calldataForL1: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      dest: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbOSVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendTxToL1(
      destAddr: PromiseOrValue<string>,
      calldataForL1: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      dest: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
