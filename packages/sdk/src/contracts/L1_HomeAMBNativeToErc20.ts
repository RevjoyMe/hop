/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface L1_HomeAMBNativeToErc20Interface extends utils.Interface {
  functions: {
    "fixFailedMessage(bytes32)": FunctionFragment;
    "setBridgeContract(address)": FunctionFragment;
    "totalSpentPerDay(uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "setExecutionDailyLimit(uint256)": FunctionFragment;
    "getCurrentDay()": FunctionFragment;
    "getBridgeMode()": FunctionFragment;
    "executionDailyLimit()": FunctionFragment;
    "mediatorBalance()": FunctionFragment;
    "totalExecutedPerDay(uint256)": FunctionFragment;
    "initialize(address,address,uint256[3],uint256[2],uint256,int256,address,address)": FunctionFragment;
    "fixMediatorBalance(address)": FunctionFragment;
    "messageFixed(bytes32)": FunctionFragment;
    "relayTokens(address)": FunctionFragment;
    "setFeeManagerContract(address)": FunctionFragment;
    "dailyLimit()": FunctionFragment;
    "claimTokens(address,address)": FunctionFragment;
    "setMediatorContractOnOtherSide(address)": FunctionFragment;
    "mediatorContractOnOtherSide()": FunctionFragment;
    "withinExecutionLimit(uint256)": FunctionFragment;
    "executionMaxPerTx()": FunctionFragment;
    "handleBridgedTokens(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "maxAvailablePerTx()": FunctionFragment;
    "requestFailedMessageFix(bytes32)": FunctionFragment;
    "getBridgeInterfacesVersion()": FunctionFragment;
    "setMinPerTx(uint256)": FunctionFragment;
    "setDailyLimit(uint256)": FunctionFragment;
    "requestGasLimit()": FunctionFragment;
    "setMaxPerTx(uint256)": FunctionFragment;
    "bridgeContract()": FunctionFragment;
    "decimalShift()": FunctionFragment;
    "feeManagerContract()": FunctionFragment;
    "minPerTx()": FunctionFragment;
    "withinLimit(uint256)": FunctionFragment;
    "setExecutionMaxPerTx(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setRequestGasLimit(uint256)": FunctionFragment;
    "maxPerTx()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fixFailedMessage"
      | "setBridgeContract"
      | "totalSpentPerDay"
      | "isInitialized"
      | "setExecutionDailyLimit"
      | "getCurrentDay"
      | "getBridgeMode"
      | "executionDailyLimit"
      | "mediatorBalance"
      | "totalExecutedPerDay"
      | "initialize"
      | "fixMediatorBalance"
      | "messageFixed"
      | "relayTokens"
      | "setFeeManagerContract"
      | "dailyLimit"
      | "claimTokens"
      | "setMediatorContractOnOtherSide"
      | "mediatorContractOnOtherSide"
      | "withinExecutionLimit"
      | "executionMaxPerTx"
      | "handleBridgedTokens"
      | "owner"
      | "maxAvailablePerTx"
      | "requestFailedMessageFix"
      | "getBridgeInterfacesVersion"
      | "setMinPerTx"
      | "setDailyLimit"
      | "requestGasLimit"
      | "setMaxPerTx"
      | "bridgeContract"
      | "decimalShift"
      | "feeManagerContract"
      | "minPerTx"
      | "withinLimit"
      | "setExecutionMaxPerTx"
      | "transferOwnership"
      | "setRequestGasLimit"
      | "maxPerTx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fixFailedMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSpentPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionDailyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionDailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mediatorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExecutedPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fixMediatorBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageFixed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManagerContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMediatorContractOnOtherSide",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mediatorContractOnOtherSide",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withinExecutionLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executionMaxPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleBridgedTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxAvailablePerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFailedMessageFix",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeInterfacesVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalShift",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManagerContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPerTx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withinLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionMaxPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "maxPerTx", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "fixFailedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSpentPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExecutedPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixMediatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMediatorContractOnOtherSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediatorContractOnOtherSide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withinExecutionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleBridgedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAvailablePerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFailedMessageFix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeInterfacesVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minPerTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionMaxPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPerTx", data: BytesLike): Result;

  events: {
    "FeeDistributed(uint256,bytes32)": EventFragment;
    "FailedMessageFixed(bytes32,address,uint256)": EventFragment;
    "TokensBridged(address,uint256,bytes32)": EventFragment;
    "DailyLimitChanged(uint256)": EventFragment;
    "ExecutionDailyLimitChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedMessageFixed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailyLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionDailyLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FeeDistributedEventObject {
  feeAmount: BigNumber;
  messageId: string;
}
export type FeeDistributedEvent = TypedEvent<
  [BigNumber, string],
  FeeDistributedEventObject
>;

export type FeeDistributedEventFilter = TypedEventFilter<FeeDistributedEvent>;

export interface FailedMessageFixedEventObject {
  messageId: string;
  recipient: string;
  value: BigNumber;
}
export type FailedMessageFixedEvent = TypedEvent<
  [string, string, BigNumber],
  FailedMessageFixedEventObject
>;

export type FailedMessageFixedEventFilter =
  TypedEventFilter<FailedMessageFixedEvent>;

export interface TokensBridgedEventObject {
  recipient: string;
  value: BigNumber;
  messageId: string;
}
export type TokensBridgedEvent = TypedEvent<
  [string, BigNumber, string],
  TokensBridgedEventObject
>;

export type TokensBridgedEventFilter = TypedEventFilter<TokensBridgedEvent>;

export interface DailyLimitChangedEventObject {
  newLimit: BigNumber;
}
export type DailyLimitChangedEvent = TypedEvent<
  [BigNumber],
  DailyLimitChangedEventObject
>;

export type DailyLimitChangedEventFilter =
  TypedEventFilter<DailyLimitChangedEvent>;

export interface ExecutionDailyLimitChangedEventObject {
  newLimit: BigNumber;
}
export type ExecutionDailyLimitChangedEvent = TypedEvent<
  [BigNumber],
  ExecutionDailyLimitChangedEventObject
>;

export type ExecutionDailyLimitChangedEventFilter =
  TypedEventFilter<ExecutionDailyLimitChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface L1_HomeAMBNativeToErc20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1_HomeAMBNativeToErc20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fixFailedMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeContract(
      _bridgeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBridgeMode(
      overrides?: CallOverrides
    ): Promise<[string] & { _data: string }>;

    executionDailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    mediatorBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _bridgeContract: PromiseOrValue<string>,
      _mediatorContract: PromiseOrValue<string>,
      _dailyLimitMaxPerTxMinPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fixMediatorBalance(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messageFixed(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    relayTokens(
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManagerContract(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMediatorContractOnOtherSide(
      _mediatorContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mediatorContractOnOtherSide(overrides?: CallOverrides): Promise<[string]>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    handleBridgedTokens(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    maxAvailablePerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestFailedMessageFix(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeContract(overrides?: CallOverrides): Promise<[string]>;

    decimalShift(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeManagerContract(overrides?: CallOverrides): Promise<[string]>;

    minPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestGasLimit(
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  fixFailedMessage(
    _messageId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeContract(
    _bridgeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSpentPerDay(
    _day: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  setExecutionDailyLimit(
    _dailyLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

  getBridgeMode(overrides?: CallOverrides): Promise<string>;

  executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  mediatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalExecutedPerDay(
    _day: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _bridgeContract: PromiseOrValue<string>,
    _mediatorContract: PromiseOrValue<string>,
    _dailyLimitMaxPerTxMinPerTxArray: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _executionDailyLimitExecutionMaxPerTxArray: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _requestGasLimit: PromiseOrValue<BigNumberish>,
    _decimalShift: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fixMediatorBalance(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messageFixed(
    _messageId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  relayTokens(
    _receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeManagerContract(
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  claimTokens(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMediatorContractOnOtherSide(
    _mediatorContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mediatorContractOnOtherSide(overrides?: CallOverrides): Promise<string>;

  withinExecutionLimit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  handleBridgedTokens(
    _recipient: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;

  requestFailedMessageFix(
    _messageId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBridgeInterfacesVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      major: BigNumber;
      minor: BigNumber;
      patch: BigNumber;
    }
  >;

  setMinPerTx(
    _minPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDailyLimit(
    _dailyLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxPerTx(
    _maxPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeContract(overrides?: CallOverrides): Promise<string>;

  decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

  feeManagerContract(overrides?: CallOverrides): Promise<string>;

  minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  withinLimit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setExecutionMaxPerTx(
    _maxPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestGasLimit(
    _requestGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    fixFailedMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeContract(
      _bridgeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeMode(overrides?: CallOverrides): Promise<string>;

    executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _bridgeContract: PromiseOrValue<string>,
      _mediatorContract: PromiseOrValue<string>,
      _dailyLimitMaxPerTxMinPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fixMediatorBalance(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    messageFixed(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    relayTokens(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManagerContract(
      _feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMediatorContractOnOtherSide(
      _mediatorContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mediatorContractOnOtherSide(overrides?: CallOverrides): Promise<string>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    handleBridgedTokens(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;

    requestFailedMessageFix(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        major: BigNumber;
        minor: BigNumber;
        patch: BigNumber;
      }
    >;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeContract(overrides?: CallOverrides): Promise<string>;

    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

    feeManagerContract(overrides?: CallOverrides): Promise<string>;

    minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestGasLimit(
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FeeDistributed(uint256,bytes32)"(
      feeAmount?: null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): FeeDistributedEventFilter;
    FeeDistributed(
      feeAmount?: null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): FeeDistributedEventFilter;

    "FailedMessageFixed(bytes32,address,uint256)"(
      messageId?: PromiseOrValue<BytesLike> | null,
      recipient?: null,
      value?: null
    ): FailedMessageFixedEventFilter;
    FailedMessageFixed(
      messageId?: PromiseOrValue<BytesLike> | null,
      recipient?: null,
      value?: null
    ): FailedMessageFixedEventFilter;

    "TokensBridged(address,uint256,bytes32)"(
      recipient?: PromiseOrValue<string> | null,
      value?: null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): TokensBridgedEventFilter;
    TokensBridged(
      recipient?: PromiseOrValue<string> | null,
      value?: null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): TokensBridgedEventFilter;

    "DailyLimitChanged(uint256)"(newLimit?: null): DailyLimitChangedEventFilter;
    DailyLimitChanged(newLimit?: null): DailyLimitChangedEventFilter;

    "ExecutionDailyLimitChanged(uint256)"(
      newLimit?: null
    ): ExecutionDailyLimitChangedEventFilter;
    ExecutionDailyLimitChanged(
      newLimit?: null
    ): ExecutionDailyLimitChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    fixFailedMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeContract(
      _bridgeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentDay(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgeMode(overrides?: CallOverrides): Promise<BigNumber>;

    executionDailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _bridgeContract: PromiseOrValue<string>,
      _mediatorContract: PromiseOrValue<string>,
      _dailyLimitMaxPerTxMinPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fixMediatorBalance(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messageFixed(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayTokens(
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeManagerContract(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMediatorContractOnOtherSide(
      _mediatorContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mediatorContractOnOtherSide(overrides?: CallOverrides): Promise<BigNumber>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    handleBridgedTokens(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    maxAvailablePerTx(overrides?: CallOverrides): Promise<BigNumber>;

    requestFailedMessageFix(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBridgeInterfacesVersion(overrides?: CallOverrides): Promise<BigNumber>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeContract(overrides?: CallOverrides): Promise<BigNumber>;

    decimalShift(overrides?: CallOverrides): Promise<BigNumber>;

    feeManagerContract(overrides?: CallOverrides): Promise<BigNumber>;

    minPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestGasLimit(
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxPerTx(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fixFailedMessage(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeContract(
      _bridgeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSpentPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExecutionDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridgeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionDailyLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mediatorBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalExecutedPerDay(
      _day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _bridgeContract: PromiseOrValue<string>,
      _mediatorContract: PromiseOrValue<string>,
      _dailyLimitMaxPerTxMinPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _executionDailyLimitExecutionMaxPerTxArray: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      _decimalShift: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fixMediatorBalance(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messageFixed(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayTokens(
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManagerContract(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMediatorContractOnOtherSide(
      _mediatorContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mediatorContractOnOtherSide(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withinExecutionLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executionMaxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleBridgedTokens(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAvailablePerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestFailedMessageFix(
      _messageId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeInterfacesVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinPerTx(
      _minPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManagerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withinLimit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExecutionMaxPerTx(
      _maxPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestGasLimit(
      _requestGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
